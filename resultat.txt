Chemin : school-service/models/school.js
Titre : school.js
Contenu :
const { DataTypes } = require("sequelize");
const sequelize = require("../config/db");

const School = sequelize.define("School", {
  id: {
    type: DataTypes.INTEGER,
    autoIncrement: true,
    primaryKey: true,
  },
  name: DataTypes.STRING,
  adress: DataTypes.STRING,
  directorName: DataTypes.STRING,
});

module.exports = School;
----------------------------------
Chemin : school-service/Dockerfile
Titre : Dockerfile
Contenu :
FROM node:18-alpine

WORKDIR /app

COPY package*.json ./
RUN npm install

COPY . .

EXPOSE 8081

CMD ["npm", "run", "dev"]
----------------------------------
Chemin : school-service/package.json
Titre : package.json
Contenu :
{
  "name": "school-service",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "start": "node index.js",
    "dev": "nodemon index.js"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": "",
  "dependencies": {
    "axios": "^1.7.9",
    "cors": "^2.8.5",
    "express": "^4.21.2",
    "pg": "^8.13.1",
    "sequelize": "^6.37.5"
  },
  "devDependencies": {
    "nodemon": "^3.1.9"
  }
}
----------------------------------
Chemin : school-service/routes/schoolRoutes.js
Titre : schoolRoutes.js
Contenu :
const express = require("express");
const router = express.Router();
const Student = require("../models/student");

// CREATE
router.post("/", async (req, res) => {
  try {
    const student = await Student.create(req.body);
    res.status(201).json(student);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// READ ALL
router.get("/", async (req, res) => {
  try {
    const students = await Student.find();
    res.json(students);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// READ ONE
router.get("/:id", async (req, res) => {
  try {
    const student = await Student.findById(req.params.id);
    if (!student) {
      return res.status(404).json({ error: "√âtudiant non trouv√©" });
    }
    res.json(student);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// UPDATE
router.put("/:id", async (req, res) => {
  try {
    const student = await Student.findByIdAndUpdate(req.params.id, req.body, { new: true });
    if (!student) {
      return res.status(404).json({ error: "√âtudiant non trouv√©" });
    }
    res.json(student);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// DELETE
router.delete("/:id", async (req, res) => {
  try {
    console.log("Tentative de suppression de l'√©tudiant ID :", req.params.id);
    
    const student = await Student.findByIdAndDelete(req.params.id);
    
    if (!student) {
      console.log("√âtudiant non trouv√© !");
      return res.status(404).json({ error: "√âtudiant non trouv√©" });
    }

    console.log("√âtudiant supprim√© avec succ√®s !");
    res.status(204).end();
  } catch (err) {
    console.error("Erreur lors de la suppression :", err);
    res.status(500).json({ error: err.message });
  }
});

module.exports = router;
----------------------------------
Chemin : school-service/config/db.js
Titre : db.js
Contenu :
const { Sequelize } = require("sequelize");

const sequelize = new Sequelize(
  process.env.POSTGRES_DB || "schooldb",    // Nom de la DB
  process.env.POSTGRES_USER || "postgres",  // User
  process.env.POSTGRES_PASSWORD || "postgres", // Password
  {
    host: process.env.POSTGRES_HOST || "localhost",
    port: process.env.POSTGRES_PORT || 5432,
    dialect: "postgres",
  }
);

module.exports = sequelize;
----------------------------------
Chemin : school-service/index.js
Titre : index.js
Contenu :
const express = require("express");
const cors = require("cors");
const sequelize = require("./config/db");
const schoolRoutes = require("./routes/schoolRoutes");
const axios = require("axios");

const app = express();
const PORT = process.env.PORT || 8081;
const SERVICE_NAME = "school-service";
const SERVICE_ID = `${SERVICE_NAME}-${PORT}`; // ID unique bas√© sur le port
const CONSUL_ADDRESS = process.env.CONSUL_HTTP_ADDR || "http://localhost:8500";

// Activer CORS avec une configuration explicite
app.use(
  cors({
    origin: "http://localhost:3000", // Remplacez cela par le port de votre frontend Nuxt/React
    methods: "GET,POST,PUT,DELETE", // M√©thodes autoris√©es
    allowedHeaders: "Content-Type,Authorization", // Headers autoris√©s
  })
);

app.use(express.json());
app.use("/schools", schoolRoutes);

// Route de health check pour Consul
app.get("/health", (req, res) => {
  res.status(200).json({ status: "UP", timestamp: new Date() });
});

// Enregistrer le service aupr√®s de Consul
async function registerWithConsul() {
  try {
    const registrationData = {
      Name: SERVICE_NAME,
      ID: SERVICE_ID,
      Address: "school-service", // Utiliser l'adresse ou le nom du conteneur si n√©cessaire
      Port: PORT,
      Check: {
        HTTP: `http://school-service:${PORT}/health`,  // V√©rification via le nom du service
        Interval: "10s",
        Timeout: "5s",
      },
    };
    await axios.put(`${CONSUL_ADDRESS}/v1/agent/service/register`, registrationData);
    console.log(`Service ${SERVICE_ID} registered with Consul`);
  } catch (err) {
    console.error(`Failed to register service with Consul: ${err.message}`);
  }
}

process.on("SIGINT", async () => {
  await deregisterFromConsul();
  process.exit();
});

// Synchronisation de la base de donn√©es et d√©marrage du service
sequelize
  .sync()
  .then(async () => {
    console.log("Connected to PostgreSQL and synced models");
    await registerWithConsul();
    app.listen(PORT, '0.0.0.0', () => { // Ecoute sur toutes les interfaces r√©seau
      console.log(`School service running on port ${PORT}`);
    });
  })
  .catch((err) => {
    console.error(`Unable to connect to the database: ${err.message}`);
  });
----------------------------------
Chemin : docker-compose.yml
Titre : docker-compose.yml
Contenu :
version: '3.8'

services:
  # Traefik comme reverse proxy
  traefik:
    image: traefik:v2.10
    container_name: traefik
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
    ports:
      - "8080:8080" # Interface web de Traefik
      - "80:80" # Reverse proxy pour les services
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro

  # Service PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: postgres_db
    environment:
      POSTGRES_DB: schooldb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  # Service MongoDB
  mongo:
    image: mongo:6.0
    container_name: mongo_db
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db

  # Service de d√©couverte Consul
  consul:
    image: consul:1.15.3
    container_name: consul_service
    command: agent -dev -client=0.0.0.0
    ports:
      - "8500:8500"
    environment:
      CONSUL_BIND_INTERFACE: eth0
    volumes:
      - consul_data:/consul/data

  # Microservice school-service avec r√©partition de charge
  school-service:
    build:
      context: ./school-service
      dockerfile: Dockerfile
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: schooldb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      CONSUL_HTTP_ADDR: "http://consul_service:8500"
    depends_on:
      - postgres
      - consul
    volumes:
      - ./school-service:/app
      - /app/node_modules
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.school-service.rule=PathPrefix(`/schools`)"
      - "traefik.http.routers.school-service.entrypoints=web"
      - "traefik.http.routers.school-service.service=school-service"
      - "traefik.http.services.school-service.loadbalancer.server.port=8081"
      - "traefik.http.services.school-service.loadbalancer.server.scheme=http" # üö® Ajout important
      - "traefik.docker.network=mon-projet_default"
    deploy:
      replicas: 1 # ‚ùå Mets 1 r√©plica temporairement pour voir si le probl√®me vient du load balancing
    ports:
      - "8081:8081"

  # Microservice student-service (pas de changement)
  student-service:
    build:
      context: ./student-service
      dockerfile: Dockerfile
    container_name: student_service
    environment:
      MONGO_URI: "mongodb://mongo_db:27017/studentdb"
      SCHOOL_SERVICE_URL: "http://school_service:8081"
      CONSUL_HTTP_ADDR: "http://consul_service:8500"
    depends_on:
      - mongo
      - school-service
      - consul
    volumes:
      - ./student-service:/app
      - /app/node_modules
    labels:
      - "traefik.http.routers.student-service.rule=PathPrefix(`/students`)"
      - "traefik.http.services.student-service.loadbalancer.server.port=8082"
    ports:
      - "8082:8082"

  # Service frontend (Next.js)
  next-front:
    build:
      context: ./my-next-front
      dockerfile: Dockerfile
    container_name: next_front
    environment:
      CONSUL_HTTP_ADDR: "http://consul_service:8500"
    depends_on:
      - consul
      - school-service
      - student-service
    ports:
      - "3000:3000"
    labels:
      - "traefik.http.routers.next-front.rule=PathPrefix(`/`)"
      - "traefik.http.services.next-front.loadbalancer.server.port=3000"

volumes:
  postgres_data:
  mongo_data:
  consul_data:
----------------------------------
Chemin : my-next-front/postcss.config.js
Titre : postcss.config.js
Contenu :
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
----------------------------------
Chemin : my-next-front/src/app/globals.css
Titre : globals.css
Contenu :
/* Importation de Bootstrap avant toutes les autres r√®gles CSS */
@import "bootstrap/dist/css/bootstrap.min.css"; 

@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --background: #ffffff;
  --foreground: #171717;
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

body {
  color: var(--foreground);
  background: var(--background);
  font-family: Arial, Helvetica, sans-serif;
}
----------------------------------
Chemin : my-next-front/src/app/layout.js
Titre : layout.js
Contenu :
// src/app/layout.js
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import 'bootstrap/dist/css/bootstrap.min.css';

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        {children}
      </body>
    </html>
  );
}
----------------------------------
Chemin : my-next-front/src/app/services/api.js
Titre : api.js
Contenu :
import axios from "axios";

const API_SCHOOL = "http://school-service:8081";
const API_STUDENT = "http://localhost:8082";

// API pour les √©coles
export async function getAllSchools() {
  const response = await axios.get(`${API_SCHOOL}/schools`);
  return response;
}

export async function createSchool(data) {
  const response = await axios.post(`${API_SCHOOL}/schools`, data);
  return response;
}

export async function updateSchool(id, data) {
  const response = await axios.put(`${API_SCHOOL}/schools/${id}`, data);
  return response;
}

export async function deleteSchool(id) {
  const response = await axios.delete(`${API_SCHOOL}/schools/${id}`);
  return response;
}

// API pour les √©tudiants
export async function getAllStudents() {
  const response = await axios.get(`${API_STUDENT}/students`);
  return response;
}

export async function createStudent(data) {
  const response = await axios.post(`${API_STUDENT}/students`, data);
  return response;
}

export async function updateStudent(id, data) {
  const response = await axios.put(`${API_STUDENT}/students/${id}`, data);
  return response;
}

export async function deleteStudent(id) {
  console.log("Tentative de suppression de l'√©tudiant :", id);
  try {
    const response = await axios.delete(`${API_STUDENT}/students/${id}`);
    console.log("√âtudiant supprim√© :", response.data);
    return response;
  } catch (error) {
    console.error("Erreur lors de la suppression de l'√©tudiant :", error.response?.data || error.message);
    throw error;
  }
}
----------------------------------
Chemin : my-next-front/src/app/page.js
Titre : page.js
Contenu :
import Link from "next/link";

export default function Home() {
  return (
    <div className="grid grid-rows-[20px_1fr_20px] items-center justify-items-center min-h-screen p-8 pb-20 gap-16 sm:p-20 font-[family-name:var(--font-geist-sans)]">
      <main className="flex flex-col gap-8 row-start-2 items-center sm:items-start">
        <h2 className="text-3xl font-bold mb-6">Bienvenue üéâ</h2>
        <p className="text-lg mb-4">
          Ceci est la page d'accueil de notre front-end Next.js.
        </p>
        <p className="text-base mb-6">
          Utilisez la navigation ci-dessus pour explorer la liste des √©coles et des √©tudiants.
        </p>

        <div className="flex gap-4 items-center flex-col sm:flex-row">
          <Link
            href="/schools"
            className="rounded-full border border-solid border-transparent transition-colors flex items-center justify-center bg-foreground text-background gap-2 hover:bg-[#383838] dark:hover:bg-[#ccc] text-sm sm:text-base h-10 sm:h-12 px-4 sm:px-5"
          >
            Voir les √©coles
          </Link>
          <Link
            href="/students"
            className="rounded-full border border-solid border-black/[.08] dark:border-white/[.145] transition-colors flex items-center justify-center hover:bg-[#f2f2f2] dark:hover:bg-[#1a1a1a] hover:border-transparent text-sm sm:text-base h-10 sm:h-12 px-4 sm:px-5 sm:min-w-44"
          >
            Voir les √©tudiants
          </Link>
        </div>
      </main>
    </div>
  );
}
----------------------------------
Chemin : my-next-front/postcss.config.mjs
Titre : postcss.config.mjs
Contenu :
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;
----------------------------------
Chemin : my-next-front/pages/students.js
Titre : students.js
Contenu :
import { useState, useEffect } from "react";
import { getAllStudents, createStudent, deleteStudent, updateStudent } from "../src/app/services/api";

export default function Students() {
  const [students, setStudents] = useState([]);
  const [form, setForm] = useState({ id: null, name: "", genre: "", schoolId: "" });

  useEffect(() => {
    fetchStudents();
  }, []);

  async function fetchStudents() {
    try {
      const response = await getAllStudents();
      setStudents(response.data);
    } catch (error) {
      console.error(error);
    }
  }

  async function addOrUpdateStudent(e) {
    e.preventDefault();
    try {
      if (form.id) {
        await updateStudent(form.id, form);
      } else {
        await createStudent(form);
      }
      fetchStudents();
      resetForm();
    } catch (error) {
      console.error(error);
    }
  }

  async function removeStudent(id) {
    console.log("Tentative de suppression de l'√©tudiant :", id);
    try {
      await deleteStudent(id);
      fetchStudents();
    } catch (error) {
      console.error("Erreur lors de la suppression de l'√©tudiant :", error);
    }
  }

  function resetForm() {
    setForm({ id: null, name: "", genre: "", schoolId: "" });
  }

  return (
    <div className="container py-5">
      <h2 className="text-center mb-4 text-primary">Liste des √©tudiants</h2>
      <table className="table table-bordered table-hover">
        <thead>
          <tr>
            <th>Nom</th>
            <th>Genre</th>
            <th>√âcole ID</th>
            <th className="text-center">Actions</th>
          </tr>
        </thead>
        <tbody>
          {students.map((student) => (
            <tr key={student._id}>
              <td>{student.name}</td>
              <td>{student.genre}</td>
              <td>{student.schoolId}</td>
              <td>
                <button onClick={() => setForm(student)} className="btn btn-warning btn-sm mr-2">
                  Modifier
                </button>
                <button onClick={() => removeStudent(student._id)} className="btn btn-danger btn-sm">
                  Supprimer
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>

      <div className="card shadow-sm p-4">
        <h3>{form.id ? "Modifier" : "Ajouter"} un √©tudiant</h3>
        <form onSubmit={addOrUpdateStudent}>
          <div className="mb-3">
            <label htmlFor="name" className="form-label">Nom de l'√©tudiant</label>
            <input
              id="name"
              type="text"
              value={form.name}
              onChange={(e) => setForm({ ...form, name: e.target.value })}
              required
              placeholder="Nom de l'√©tudiant"
              className="form-control"
            />
          </div>
          <div className="mb-3">
            <label htmlFor="genre" className="form-label">Genre</label>
            <input
              id="genre"
              type="text"
              value={form.genre}
              onChange={(e) => setForm({ ...form, genre: e.target.value })}
              required
              placeholder="Genre"
              className="form-control"
            />
          </div>
          <div className="mb-3">
            <label htmlFor="schoolId" className="form-label">ID de l'√©cole</label>
            <input
              id="schoolId"
              type="number"
              value={form.schoolId}
              onChange={(e) => setForm({ ...form, schoolId: e.target.value })}
              required
              placeholder="ID de l'√©cole"
              className="form-control"
            />
          </div>
          <div className="d-flex justify-content-end">
            <button type="submit" className="btn btn-primary me-2">
              {form.id ? "Mettre √† jour" : "Ajouter"}
            </button>
            <button type="button" onClick={resetForm} className="btn btn-secondary">
              Annuler
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}
----------------------------------
Chemin : my-next-front/pages/schools.js
Titre : schools.js
Contenu :
import { useState, useEffect } from "react";
import { getAllSchools, createSchool, updateSchool, deleteSchool } from "../src/app/services/api"; // ‚úÖ Ajout d'updateSchool

export default function Schools() {
  const [schools, setSchools] = useState([]);
  const [form, setForm] = useState({ id: null, name: "", adress: "", directorName: "" });

  // Charge les √©coles au d√©marrage
  useEffect(() => {
    fetchSchools();
  }, []);

  async function fetchSchools() {
    try {
      const response = await getAllSchools();
      setSchools(response.data);
    } catch (error) {
      console.error(error);
    }
  }

  async function addSchool() {
    try {
      await createSchool(form);
      fetchSchools();
      resetForm();
    } catch (error) {
      console.error(error);
    }
  }

  async function updateSchoolHandler() { // ‚úÖ Renommage de la fonction
    try {
      await updateSchool(form.id, form);  // ‚úÖ Correction : Appeler la bonne fonction API
      fetchSchools();
      resetForm();
    } catch (error) {
      console.error(error);
    }
  }

  async function removeSchool(id) {
    try {
      await deleteSchool(id);
      fetchSchools();
    } catch (error) {
      console.error(error);
    }
  }

  function resetForm() {
    setForm({ id: null, name: "", adress: "", directorName: "" });
  }

  return (
    <div className="container py-5">
      <h2 className="text-center mb-4 text-primary">Liste des √©coles</h2>
      <button className="btn btn-primary mb-3" onClick={addSchool}>Ajouter une √©cole</button>

      <table className="table table-bordered table-hover">
        <thead>
          <tr>
            <th>Nom</th>
            <th>Adresse</th>
            <th>Directeur</th>
            <th className="text-center">Actions</th>
          </tr>
        </thead>
        <tbody>
          {schools.map((school) => (
            <tr key={school.id}>
              <td>{school.name}</td>
              <td>{school.adress}</td>
              <td>{school.directorName}</td>
              <td>
                <button onClick={() => setForm(school)} className="btn btn-warning btn-sm mr-2">Modifier</button>
                <button onClick={() => removeSchool(school.id)} className="btn btn-danger btn-sm">Supprimer</button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>

      <div className="card shadow-sm p-4">
        <h3>{form.id ? "Modifier" : "Ajouter"} une √©cole</h3>
        <form onSubmit={(e) => { 
            e.preventDefault(); // ‚úÖ Emp√™cher le rechargement de la page
            form.id ? updateSchoolHandler() : addSchool();
        }}>
          <div className="mb-3">
            <label htmlFor="name" className="form-label">Nom de l'√©cole</label>
            <input
              id="name"
              type="text"
              value={form.name}
              onChange={(e) => setForm({ ...form, name: e.target.value })}
              required
              placeholder="Nom de l'√©cole"
              className="form-control"
            />
          </div>
          <div className="mb-3">
            <label htmlFor="adress" className="form-label">Adresse</label>
            <input
              id="adress"
              type="text"
              value={form.adress}
              onChange={(e) => setForm({ ...form, adress: e.target.value })}
              required
              placeholder="Adresse"
              className="form-control"
            />
          </div>
          <div className="mb-3">
            <label htmlFor="directorName" className="form-label">Nom du directeur</label>
            <input
              id="directorName"
              type="text"
              value={form.directorName}
              onChange={(e) => setForm({ ...form, directorName: e.target.value })}
              required
              placeholder="Nom du directeur"
              className="form-control"
            />
          </div>
          <div className="d-flex justify-content-end">
            <button type="submit" className="btn btn-primary me-2">
              {form.id ? "Mettre √† jour" : "Ajouter"}
            </button>
            <button type="button" onClick={resetForm} className="btn btn-secondary">Annuler</button>
          </div>
        </form>
      </div>
    </div>
  );
}
----------------------------------
Chemin : my-next-front/next.config.mjs
Titre : next.config.mjs
Contenu :
/** @type {import('next').NextConfig} */
const nextConfig = {};

export default nextConfig;
----------------------------------
Chemin : my-next-front/Dockerfile
Titre : Dockerfile
Contenu :
# √âtape 1 : Construction de l'application
FROM node:18-alpine AS build

WORKDIR /app

# Copiez les fichiers package.json et package-lock.json
COPY package*.json ./

# Installez les d√©pendances
RUN npm install

# Copiez tout le reste du code
COPY . .

# Construisez l'application
RUN npm run build

# √âtape 2 : Servir l'application avec un serveur l√©ger
FROM node:18-alpine

WORKDIR /app

# Copiez le dossier 'build' du conteneur pr√©c√©dent
COPY --from=build /app /app

# Installez les d√©pendances pour d√©marrer l'application
RUN npm install --only=production

# Exposez le port de l'application Next.js
EXPOSE 3000

# Commande de d√©marrage de Next.js
CMD ["npm", "start"]
----------------------------------
Chemin : my-next-front/tailwind.config.js
Titre : tailwind.config.js
Contenu :
// tailwind.config.mjs
export default {
  content: [
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {
      colors: {
        background: "var(--background)",
        foreground: "var(--foreground)",
      },
    },
  },
  plugins: [],
};
----------------------------------
Chemin : my-next-front/tailwind.config.mjs
Titre : tailwind.config.mjs
Contenu :
/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {
      colors: {
        background: "var(--background)",
        foreground: "var(--foreground)",
      },
    },
  },
  plugins: [],
};
----------------------------------
Chemin : my-next-front/package.json
Titre : package.json
Contenu :
{
  "name": "my-next-front",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "axios": "^1.7.9",
    "bootstrap": "^5.3.3",
    "next": "15.1.4",
    "react": "^19.0.0",
    "react-dom": "^19.0.0"
  },
  "devDependencies": {
    "autoprefixer": "^10.4.20",
    "postcss": "^8.5.1",
    "tailwindcss": "^3.4.17"
  }
}
----------------------------------
Chemin : my-next-front/jsconfig.json
Titre : jsconfig.json
Contenu :
{
  "compilerOptions": {
    "paths": {
      "@/*": ["./src/*"]
    }
  }
}
----------------------------------
Chemin : docker
Titre : docker
Contenu :
sudo systemctl stop postgresql

DOCKER_BUILDKIT=0 docker-compose up --build
----------------------------------
Chemin : student-service/models/student.js
Titre : student.js
Contenu :
const mongoose = require("mongoose");

const studentSchema = new mongoose.Schema({
  name: String,
  genre: String,
  schoolId: Number, // l'id de l'√©cole
});

module.exports = mongoose.model("Student", studentSchema);
----------------------------------
Chemin : student-service/Dockerfile
Titre : Dockerfile
Contenu :
FROM node:18-alpine

WORKDIR /app

COPY package*.json ./
RUN npm install

COPY . .

EXPOSE 8082

CMD ["npm", "run", "dev"]
----------------------------------
Chemin : student-service/services/schoolService.js
Titre : schoolService.js
Contenu :
const axios = require("axios");

const CONSUL_URL = process.env.CONSUL_HTTP_ADDR || "http://localhost:8500";
let cachedSchoolServiceUrl = null;
let cachedSchools = []; // Cache pour toutes les √©coles
let cacheTimestamp = null; // Timestamp du dernier cache

const CACHE_EXPIRY_TIME = 10 * 60 * 1000; // Cache valable pendant 10 minutes
const MAX_RETRIES = 3; // Nombre maximal de tentatives de retry
const RETRY_DELAY = 2000; // D√©lai entre les tentatives en ms (2 secondes)

async function getSchoolServiceUrl() {
  if (cachedSchoolServiceUrl) {
    return cachedSchoolServiceUrl;
  }

  let attempts = 0;
  while (attempts < MAX_RETRIES) {
    try {
      const response = await axios.get(`${CONSUL_URL}/v1/catalog/service/school-service`);
      if (!response.data.length) {
        throw new Error("Aucune instance de school-service trouv√©e via Consul");
      }

      const service = response.data[0];
      cachedSchoolServiceUrl = `http://${service.ServiceAddress || service.Address}:${service.ServicePort}`;
      return cachedSchoolServiceUrl;
    } catch (error) {
      attempts++;
      console.error(`[Consul] Tentative ${attempts}/${MAX_RETRIES} √©chou√©e : ${error.message}`);
      if (attempts >= MAX_RETRIES) {
        console.error("[Consul] √âchec apr√®s plusieurs tentatives, utilisation de l'URL de fallback.");
        return process.env.SCHOOL_SERVICE_URL || "http://localhost:8081"; // Fallback si toutes les tentatives √©chouent
      }
      console.log(`[Consul] Attente de ${RETRY_DELAY / 1000} secondes avant de r√©essayer...`);
      await new Promise(resolve => setTimeout(resolve, RETRY_DELAY));
    }
  }
}

// V√©rifier si le cache des √©coles est encore valide
function isCacheValid() {
  return cacheTimestamp && (Date.now() - cacheTimestamp) < CACHE_EXPIRY_TIME;
}

// üÜï R√©cup√©rer toutes les √©coles en une seule requ√™te avec cache et retry
async function getAllSchools() {
  if (isCacheValid()) {
    console.log("[SchoolService] Utilisation du cache pour les √©coles");
    return cachedSchools;
  }

  try {
    const baseUrl = await getSchoolServiceUrl();
    const response = await axios.get(`${baseUrl}/schools`);
    cachedSchools = response.data;
    cacheTimestamp = Date.now(); // Mettre √† jour le timestamp du cache
    console.log("[SchoolService] Cache des √©coles rafra√Æchi");
    return cachedSchools;
  } catch (error) {
    console.error(`[SchoolService] Erreur r√©cup√©ration de toutes les √©coles: ${error.message}`);
    return [];
  }
}

async function getSchoolById(schoolId) {
  let attempts = 0;
  while (attempts < MAX_RETRIES) {
    try {
      const baseUrl = await getSchoolServiceUrl();
      const response = await axios.get(`${baseUrl}/schools/${schoolId}`);
      return response.data;
    } catch (error) {
      attempts++;
      console.error(`[SchoolService] Tentative ${attempts}/${MAX_RETRIES} √©chou√©e pour l'√©cole ${schoolId}: ${error.message}`);
      if (attempts >= MAX_RETRIES) {
        console.error("[SchoolService] √âchec apr√®s plusieurs tentatives");
        return null;
      }
      console.log(`[SchoolService] Attente de ${RETRY_DELAY / 1000} secondes avant de r√©essayer...`);
      await new Promise(resolve => setTimeout(resolve, RETRY_DELAY));
    }
  }
}

module.exports = { getSchoolById, getAllSchools };
----------------------------------
Chemin : student-service/package.json
Titre : package.json
Contenu :
{
  "name": "student-service",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "start": "node index.js",
    "dev": "nodemon index.js"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": "",
  "dependencies": {
    "axios": "^1.7.9",
    "cors": "^2.8.5",
    "express": "^4.21.2",
    "mongoose": "^8.9.4"
  },
  "devDependencies": {
    "nodemon": "^3.1.9"
  }
}
----------------------------------
Chemin : student-service/routes/studentRoutes.js
Titre : studentRoutes.js
Contenu :
// studentRoutes.js
const express = require("express");
const router = express.Router();
const mongoose = require("mongoose");
const Student = require("../models/student");
const { getAllSchools } = require("../services/schoolService"); // Nouvelle fonction

// CREATE
router.post("/", async (req, res) => {
  try {
    const student = await Student.create(req.body);
    res.status(201).json(student);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// READ ALL (Optimis√© avec r√©cup√©ration group√©e des √©coles)
router.get("/", async (req, res) => {
  try {
    const students = await Student.find();

    // R√©cup√©rer toutes les √©coles en une seule requ√™te
    const schools = await getAllSchools();
    const schoolMap = schools.reduce((map, school) => {
      map[school.id] = school;
      return map;
    }, {});

    // Associer chaque √©tudiant √† son √©cole
    const studentsWithSchools = students.map(student => ({
      ...student.toObject(),
      school: schoolMap[student.schoolId] || null
    }));

    res.json(studentsWithSchools);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// READ ONE (Pas de changement, r√©cup√©ration de l'√©cole au cas par cas)
router.get("/:id", async (req, res) => {
  try {
    const student = await Student.findById(req.params.id);
    if (!student) {
      return res.status(404).json({ error: "Student not found" });
    }

    let school = null;
    if (student.schoolId) {
      school = await getSchoolById(student.schoolId);
    }

    const studentWithSchool = {
      ...student.toObject(),
      school: school || null,
    };

    res.json({ student: studentWithSchool });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

module.exports = router;
----------------------------------
Chemin : student-service/config/db.js
Titre : db.js
Contenu :
const mongoose = require("mongoose");

mongoose.connect(process.env.MONGO_URI || "mongodb://localhost:27017/studentdb", {
  useNewUrlParser: true,
  useUnifiedTopology: true
});

module.exports = mongoose;
----------------------------------
Chemin : student-service/index.js
Titre : index.js
Contenu :
const express = require("express");
const cors = require("cors");
const mongoose = require("./config/db");
const studentRoutes = require("./routes/studentRoutes");
const axios = require("axios");

const app = express();
const PORT = process.env.PORT || 8082;
const SERVICE_NAME = "student-service";
const SERVICE_ID = `${SERVICE_NAME}-${PORT}`; // ID unique bas√© sur le port
const CONSUL_ADDRESS = process.env.CONSUL_HTTP_ADDR || "http://localhost:8500";

// Activer CORS avec une configuration explicite
app.use(
  cors({
    origin: "http://localhost:3000", // Autorise uniquement cette origine
    methods: "GET,POST,PUT,DELETE", // M√©thodes autoris√©es
    allowedHeaders: "Content-Type,Authorization", // Headers autoris√©s
  })
);

app.use(express.json());
app.use("/students", studentRoutes);

// Route de health check pour Consul
app.get("/health", (req, res) => {
  res.status(200).json({ status: "UP", timestamp: new Date() });
});

// Enregistrer le service aupr√®s de Consul
async function registerWithConsul() {
  try {
    const registrationData = {
      Name: SERVICE_NAME,
      ID: SERVICE_ID,
      Address: "student-service",
      Port: PORT,
      Check: {
        HTTP: `http://student-service:${PORT}/health`,
        Interval: "10s",
        Timeout: "5s",
      },
    };
    await axios.put(`${CONSUL_ADDRESS}/v1/agent/service/register`, registrationData);
    console.log(`Service ${SERVICE_ID} registered with Consul`);
  } catch (err) {
    console.error(`Failed to register service with Consul: ${err.message}`);
  }
}

process.on("SIGINT", async () => {
  await deregisterFromConsul();
  process.exit();
});

mongoose.connection.on("connected", async () => {
  console.log("Connected to MongoDB");
  await registerWithConsul();
  app.listen(PORT, () => {
    console.log(`Student service running on http://0.0.0.0:${PORT}`);
  });
});

mongoose.connection.on("error", (err) => {
  console.error("MongoDB connection error:", err);
});
----------------------------------
